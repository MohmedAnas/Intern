import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

file_path = r"C:\Users\admin\Downloads\archive (1)\Titanic-Dataset.csv"
df = pd.read_csv(file_path)

df.head(15)

# Checking the missing values
missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

# Checking data types
print(df.dtypes)


features = ['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean',
                    'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',
                    'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se',
                    'concavity_se', 'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst',
                    'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst',
                    'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst']
X = df.drop(['id', 'diagnosis'], axis=1)
y = df['diagnosis']

# Split the dataset into training and testing phase
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build a mode
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate model performance
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Final Results
# Breast Cancer diagnosis 
# B = Benign and M = malignant
results = pd.DataFrame({'Actual_Diagnosis': y_test, 'Predicted_Diagnosis': y_pred})
print(results)
